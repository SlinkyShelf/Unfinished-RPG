--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Main Module

--[[Services]]--
local RunService = game:GetService("RunService")

--[[Constants]]--
--Objects
local Assets = game.ReplicatedStorage.Assets
local EnemyAssets = Assets.Enemies

local EnemyFolder = Instance.new("Folder")
EnemyFolder.Name = "EnemyFolder"
EnemyFolder.Parent = workspace

--Tables
local EnemyAITypes = {}
for i, v in pairs(EnemyAssets:GetChildren()) do
	EnemyAITypes[v.Name] = require(v.AI)
end
local module = {}

local PathRefreshRate = .5

--[[Variables]]--
--Tables
local Enemies = {}
local EnemyAIs = {}

--[[Functions]]--
local function newKey(Check)
	local Key = ""
	for i = 1, 10 do
		Key = Key..math.random(0, 9)
	end
	if Check[Key] then
		Key = newKey(Check)
	end
	return Key
end

function module.newEnemy(EnemyType, Position)
	local EnemyTypeData = EnemyAssets[EnemyType]
	local newEnemyKey = newKey(Enemies)
	
	local newEnemy = {}
	newEnemy.Type = EnemyType
	local newEnemyModel = EnemyTypeData.Model:Clone()
	newEnemyModel:SetPrimaryPartCFrame(CFrame.new(Position))
	newEnemy.Model = newEnemyModel
	
	local newEnemyKeyObject = Instance.new("Configuration")
	newEnemyKeyObject.Name = "Enemy"
	
	local EnemyKeyValue = Instance.new("StringValue")
	EnemyKeyValue.Name = "Key"
	EnemyKeyValue.Value = newEnemyKey
	EnemyKeyValue.Parent = newEnemyKeyObject
	
	
	
	EnemyKeyValue.Parent = newEnemyModel
	newEnemyModel.Parent = EnemyFolder
	
	local EnemyAI = EnemyAITypes[EnemyType](newEnemy)
	newEnemy.AI = EnemyAI
	EnemyAIs[newEnemyKey] = EnemyAI
	
	Enemies[newEnemyKey] = newEnemy
	
	return newEnemyKey
end

--[[Main]]--
local EnemySpawning = require(script.EnemySpawning)
local RecognizedPlayers = require(script.Parent.RecognizedPlayers)

local WaitingForPathUpdate = true
RunService.Heartbeat:Connect(function(TickDistance)
	local CurrentTick = tick()
	local HeavyTick = false
	if CurrentTick%PathRefreshRate < .03 and WaitingForPathUpdate then
		WaitingForPathUpdate = false
		HeavyTick = true
	else
		WaitingForPathUpdate = true
	end
	
	for i, v in pairs(EnemyAIs) do
		v(TickDistance, HeavyTick)
	end
end)

return module

--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Spawning Module

--[[Services]]--
local RunService = game:GetService("RunService")

--[[Constants]]--
--Objects
local EnemySpawnPointFolder = workspace.EnemySpawnPoints
local EnemySpawnPoints = {}

--[[Modules]]--
local EnemyService --We do this so the modules do not interfier with eachother
local newEnemy
spawn(function()
	EnemyService = require(script.Parent)
	newEnemy = EnemyService.newEnemy
end)

--[[Main]]--

for i, v in pairs(EnemySpawnPointFolder:GetChildren()) do
	print(i)
	local newPoint = {}
	newPoint.Enemies = {}
	newPoint.EnemyNumber = 0
	newPoint.Position = v.Position
	newPoint.Type = v.Name
	newPoint.NextSpawn = 0
	EnemySpawnPoints[#EnemySpawnPoints+1] = newPoint
	
end

local EnemySpawnPointCount = #EnemySpawnPoints

RunService.Heartbeat:Connect(function()
	local CurrentTick = tick()
	for i = 1, EnemySpawnPointCount do
		local EnemySpawnPoint = EnemySpawnPoints[i]
		if EnemySpawnPoint.NextSpawn < CurrentTick then
			print("Spawned")
			EnemySpawnPoint.NextSpawn = CurrentTick + 60
			
			local EnemyKey = newEnemy(EnemySpawnPoint.Type, EnemySpawnPoint.Position)
		end
		
	end
end)

return true

--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Thread

--This script just requires the script it is parented to

local Module = require(script.Parent)

