--[[Services]]--
local ContextActionService = game:GetService("ContextActionService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

--[[Constants]]--
local plr = game.Players.LocalPlayer
local Character = plr.Character or plr.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Humanoid.RootPart

local Camera = workspace.CurrentCamera

local RollAnimationObject = game.ReplicatedStorage.Assets.Animations.Player.Roll
local RollAnim = Humanoid:LoadAnimation(RollAnimationObject)

local Controller = require(
	game.Players.LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule")
):GetControls()

local RollTweenInfo = TweenInfo.new(
	1,
	Enum.EasingStyle.Quart,
	Enum.EasingDirection.Out
)

--[[Variables]]--
local RootPartPoint = true
local Direction = {0, 0}

--[[Functions]]--
local function DirectRootPartToMovementDirection()
		return RootPart.CFrame*CFrame.lookAt(
			Vector3.new(0, 0, 0),
			Vector3.new(Direction[1], 0, Direction[2])
		)
end

local function DirectionUpdate(_, UserInputState, InputObject)
	local newDirection = {0, 0}
	if UserInputService:IsKeyDown(Enum.KeyCode.W) then newDirection[2] = -1 end
	if UserInputService:IsKeyDown(Enum.KeyCode.S) then newDirection[2] = newDirection[2]+1 end
	if UserInputService:IsKeyDown(Enum.KeyCode.D) then newDirection[1] = 1 end
	if UserInputService:IsKeyDown(Enum.KeyCode.A) then newDirection[1] = newDirection[1]-1 end
	print(Direction[1], Direction[2])
	Direction = newDirection
end

local function Roll(_, UserInputState, _)
	if UserInputState == Enum.UserInputState.Begin then
		if Humanoid.MoveDirection.Magnitude > 0 then
			RootPartPoint = false
			--Controller:Disable()
			
			
			local MovementDirection = DirectRootPartToMovementDirection()
			
			RootPart.CFrame = MovementDirection
			RootPart.Anchored = true
			
			local RollTween = TweenService:Create(
				RootPart, 
				RollTweenInfo, 
				{
					["CFrame"] = MovementDirection + MovementDirection.LookVector*10
				}
			)
			
			RollTween:Play()
			RollAnim:Play()
			
			wait(RollTweenInfo.Time) 
			RootPart.Anchored = false
			RootPartPoint = true
			--Controller:Enable()
			
		end
	end
end

--[[Main]]--
ContextActionService:BindAction("Roll", Roll, false, Enum.KeyCode.LeftShift)
ContextActionService:BindActionAtPriority(
	"DirectionUpdate", 
	DirectionUpdate, 
	false,
	Enum.ContextActionPriority.Low.Value,
	Enum.KeyCode.W,
	Enum.KeyCode.S,
	Enum.KeyCode.D,
	Enum.KeyCode.A
)

RunService:BindToRenderStep("RootPartPoint", 199, function()
	if RootPartPoint then
		local X, Y, Z = Camera.CFrame:ToOrientation()
		RootPart.CFrame = CFrame.fromOrientation(0, Y, 0)+RootPart.Position
	end
end)
