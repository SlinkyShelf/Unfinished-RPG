--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Main Module
--[[Services]]--
local RunService = game:GetService("RunService")
local ContextActionService = game:GetService("ContextActionService")

--[[Constants]]--
local module = {}
local CameraTypes = {}
for i, v in pairs(script:GetChildren()) do
	if v:IsA("ModuleScript") then
		CameraTypes[v.Name] = require(v)
	end
end

--[[Variables]]--
module.CameraState = "Default"

--[[Functions]]--
local function ChangeViews(_, InputState, _)
	if InputState == Enum.UserInputState.Begin then
		if module.CameraState == "Combat" then
			module.ChangeState("InGui")
		else
			module.ChangeState("Combat")
		end
	end
end

function module.ChangeState(newState)
	RunService:UnbindFromRenderStep("Camera")
	CameraTypes[module.CameraState]:Release()
	CameraTypes[newState]:SetUp()
	RunService:BindToRenderStep("Camera", 199, CameraTypes[newState].Update)
	module.CameraState = newState
end

ContextActionService:BindAction("ChangeViews", ChangeViews, false, Enum.KeyCode.B)

return module

--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Combat Camera Module

--[[Services]]--
local ContextActionService = game:GetService("ContextActionService")
local UserInputService = game:GetService("UserInputService")
local UserSettingsService = UserSettings():GetService("UserGameSettings")

--[[Constants]]--
local plr = game.Players.LocalPlayer
local Mouse = plr:GetMouse()
local Camera = workspace.CurrentCamera
local Character = plr.Character or plr.CharacterAdded:Wait()
local RootPart = Character:WaitForChild("HumanoidRootPart")
local module = {}

local LockCenter = Enum.MouseBehavior.LockCenter
local Scriptable = Enum.CameraType.Scriptable

local HeadOffset = Vector3.new(0, 2, 0)
local RootPartOffsetVector = Vector3.new(2, 2, 4)
local MouseSensitivity = UserSettingsService.MouseSensitivity/100

local MaxY = math.rad(89)
local MinY = -MaxY

local ZoomIncrement = .25
local MinZoom = 1
local MaxZoom = 3

--[[Variables]]--
local Zoom = 1.5
local CameraOrientation = {0, 0}

--[[Functions]]--
local function ZoomUpdate(_, UserInputState, InputObject)
	Zoom = Zoom + InputObject.Position.Z*ZoomIncrement
	if Zoom < MinZoom then Zoom = MinZoom end
	if Zoom > MaxZoom then Zoom = MaxZoom end
end

function module:Update()
	Camera.CameraType = Scriptable
	UserInputService.MouseBehavior = LockCenter

	local MouseDelta = UserInputService:GetMouseDelta()
	CameraOrientation[1] = CameraOrientation[1] - (MouseDelta.X*MouseSensitivity)
	CameraOrientation[2] = CameraOrientation[2] - (MouseDelta.Y*MouseSensitivity)
	if CameraOrientation[2] > MaxY then CameraOrientation[2] = MaxY end
	if CameraOrientation[2] < MinY then CameraOrientation[2] = MinY end

	RootPart.CFrame = CFrame.fromOrientation(0, CameraOrientation[1], 0)+RootPart.Position

	Camera.CFrame = (CFrame.fromOrientation(CameraOrientation[2], CameraOrientation[1], 0)
		+RootPart.Position+HeadOffset):ToWorldSpace(
			CFrame.new(RootPartOffsetVector.X, 0, RootPartOffsetVector.Z*Zoom))
		+Vector3.new(0, RootPartOffsetVector.Y*Zoom, 0
		)
end

function module:SetUp()
	ContextActionService:BindAction("Zoom", ZoomUpdate, false, Enum.UserInputType.MouseWheel)
	
	return 
end

function module:Release()

end

return module

--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--InGui Camera Module

--[[Services]]--
local ContextActionService = game:GetService("ContextActionService")
local UserInputService = game:GetService("UserInputService")
local UserSettingsService = UserSettings():GetService("UserGameSettings")

--[[Constants]]--
local plr = game.Players.LocalPlayer
local Mouse = plr:GetMouse()
local Camera = workspace.CurrentCamera
local Character = plr.Character or plr.CharacterAdded:Wait()
local RootPart = Character:WaitForChild("HumanoidRootPart")
local module = {}

local Controller = require(
	game.Players.LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule")
):GetControls()

local Scriptable = Enum.CameraType.Scriptable

local RootPartOffsetVector = CFrame.new(0, 3, -8)
local MouseSensitivity = UserSettingsService.MouseSensitivity/100

--[[Variables]]--


--[[Functions]]--
function module:Update()
	Camera.CameraType = Scriptable
end

function module:SetUp()
	UserInputService.MouseBehavior = Enum.MouseBehavior.Default
	Controller:Disable()
	Camera.CameraType = Scriptable
	Camera.CFrame = CFrame.lookAt(
		RootPart.CFrame:ToWorldSpace(RootPartOffsetVector).Position, 
		RootPart.Position
	)
end

function module:Release()
	Controller:Enable()
end

return module

--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Default Camera Module

--[[Services]]--
local ContextActionService = game:GetService("ContextActionService")
local UserInputService = game:GetService("UserInputService")
local UserSettingsService = UserSettings():GetService("UserGameSettings")

--[[Constants]]--
local plr = game.Players.LocalPlayer
local Mouse = plr:GetMouse()
local Camera = workspace.CurrentCamera
local Character = plr.Character or plr.CharacterAdded:Wait()
local RootPart = Character:WaitForChild("HumanoidRootPart")
local module = {}

local Controller = require(
	game.Players.LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule")
):GetControls()

--[[Variables]]--


--[[Functions]]--
function module:Update()
	
end

function module:SetUp()
	Controller:Enable()
end

function module:Release()
	
end

return module
